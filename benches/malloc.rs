#[cfg(not(target_env = "msvc"))]
use tikv_jemallocator::Jemalloc;

#[cfg(not(target_env = "msvc"))]
#[global_allocator]
static GLOBAL: Jemalloc = Jemalloc;

use criterion::{Criterion, criterion_group, criterion_main};

fn vec_alloc() {
    for _ in 0..10000 {
        let v = vec![0u8; 65535];
        let _sum = v[0] + v[1];
    }
}

fn vec_cfs() {
    let src = "12345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456".as_bytes();
    let len = src.len();
    for _ in 0..1000000 {
        let mut v = vec![0u8; len];
        v[..].copy_from_slice(src);
        let _sum = v[1] + v[0];
    }
}

fn vec_efs() {
    let src = "12345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456".as_bytes();
    let len = src.len();
    for _ in 0..1000000 {
        let mut v = Vec::with_capacity(len);
        v.extend_from_slice(src);
        let _sum = v[1] + v[0];
    }
}

fn vec_memmove() {
    let src = "12345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456".as_bytes();
    let len = src.len();
    for _ in 0..1000000 {

        let mut v = Vec::with_capacity(len);
        unsafe {
            std::ptr::copy(src.as_ptr(), v.as_mut_ptr(), len);
            v.set_len(len);
        }
        let _sum = v[1] + v[0];
    }
}

fn vec_memcpy() {
    let src = "12345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456123456789012345612345678901234561234567890123456".as_bytes();
    let len = src.len();
    for _ in 0..1000000 {

        let mut v = Vec::with_capacity(len);
        unsafe {
            std::ptr::copy_nonoverlapping(src.as_ptr(), v.as_mut_ptr(), len);
            v.set_len(len);
        }
        let _sum = v[1] + v[0];
    }
}

fn vec_benchmark(c: &mut Criterion) {
    c.bench_function("vec_alloc", |b|b.iter(vec_alloc));
    c.bench_function("vec_cfs", |b|b.iter(vec_cfs));
    c.bench_function("vec_efs", |b|b.iter(vec_efs));
    c.bench_function("vec_memmove", |b|b.iter(vec_memmove));
    c.bench_function("vec_memcpy", |b|b.iter(vec_memcpy));
}

criterion_group!(benches, vec_benchmark);
criterion_main!(benches);