// This file is generated by rust-protobuf 3.1.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `pack.pb.proto`

use std::sync::Arc;

use lockfree_object_pool::LinearObjectPool;
use protobuf::Message;
use tg::{utils, nw::pack};

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_1_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:pb.Package)
pub struct Package {
    // message fields
    // @@protoc_insertion_point(field:pb.Package.service_id)
    pub service_id: u32,
    // @@protoc_insertion_point(field:pb.Package.package_id)
    pub package_id: u32,
    // @@protoc_insertion_point(field:pb.Package.router_id)
    pub router_id: u32,
    // @@protoc_insertion_point(field:pb.Package.idempotent)
    pub idempotent: u32,
    // @@protoc_insertion_point(field:pb.Package.token)
    pub token: u32,
    // @@protoc_insertion_point(field:pb.Package.len)
    pub len: u32,
    // @@protoc_insertion_point(field:pb.Package.data)
    pub data: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:pb.Package.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Package {
    fn default() -> &'a Package {
        <Package as ::protobuf::Message>::default_instance()
    }
}

impl Package {
    pub fn new() -> Package {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(7);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "service_id",
            |m: &Package| { &m.service_id },
            |m: &mut Package| { &mut m.service_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "package_id",
            |m: &Package| { &m.package_id },
            |m: &mut Package| { &mut m.package_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "router_id",
            |m: &Package| { &m.router_id },
            |m: &mut Package| { &mut m.router_id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "idempotent",
            |m: &Package| { &m.idempotent },
            |m: &mut Package| { &mut m.idempotent },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "token",
            |m: &Package| { &m.token },
            |m: &mut Package| { &mut m.token },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "len",
            |m: &Package| { &m.len },
            |m: &mut Package| { &mut m.len },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "data",
            |m: &Package| { &m.data },
            |m: &mut Package| { &mut m.data },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Package>(
            "Package",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Package {
    const NAME: &'static str = "Package";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.service_id = is.read_uint32()?;
                },
                16 => {
                    self.package_id = is.read_uint32()?;
                },
                24 => {
                    self.router_id = is.read_uint32()?;
                },
                32 => {
                    self.idempotent = is.read_uint32()?;
                },
                40 => {
                    self.token = is.read_uint32()?;
                },
                48 => {
                    self.len = is.read_uint32()?;
                },
                58 => {
                    self.data = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.service_id != 0 {
            my_size += ::protobuf::rt::uint32_size(1, self.service_id);
        }
        if self.package_id != 0 {
            my_size += ::protobuf::rt::uint32_size(2, self.package_id);
        }
        if self.router_id != 0 {
            my_size += ::protobuf::rt::uint32_size(3, self.router_id);
        }
        if self.idempotent != 0 {
            my_size += ::protobuf::rt::uint32_size(4, self.idempotent);
        }
        if self.token != 0 {
            my_size += ::protobuf::rt::uint32_size(5, self.token);
        }
        if self.len != 0 {
            my_size += ::protobuf::rt::uint32_size(6, self.len);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(7, &self.data);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.service_id != 0 {
            os.write_uint32(1, self.service_id)?;
        }
        if self.package_id != 0 {
            os.write_uint32(2, self.package_id)?;
        }
        if self.router_id != 0 {
            os.write_uint32(3, self.router_id)?;
        }
        if self.idempotent != 0 {
            os.write_uint32(4, self.idempotent)?;
        }
        if self.token != 0 {
            os.write_uint32(5, self.token)?;
        }
        if self.len != 0 {
            os.write_uint32(6, self.len)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(7, &self.data)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Package {
        Package::new()
    }

    fn clear(&mut self) {
        self.service_id = 0;
        self.package_id = 0;
        self.router_id = 0;
        self.idempotent = 0;
        self.token = 0;
        self.len = 0;
        self.data.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Package {
        static instance: Package = Package {
            service_id: 0,
            package_id: 0,
            router_id: 0,
            idempotent: 0,
            token: 0,
            len: 0,
            data: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Package {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Package").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Package {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Package {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rpack.pb.proto\x12\x02pb\"\xc0\x01\n\x07Package\x12\x1d\n\nservice_id\
    \x18\x01\x20\x01(\rR\tserviceId\x12\x1d\n\npackage_id\x18\x02\x20\x01(\r\
    R\tpackageId\x12\x1b\n\trouter_id\x18\x03\x20\x01(\rR\x08routerId\x12\
    \x1e\n\nidempotent\x18\x04\x20\x01(\rR\nidempotent\x12\x14\n\x05token\
    \x18\x05\x20\x01(\rR\x05token\x12\x10\n\x03len\x18\x06\x20\x01(\rR\x03le\
    n\x12\x12\n\x04data\x18\x07\x20\x01(\x0cR\x04dataJ\xb5\x03\n\x06\x12\x04\
    \0\0\x0c\x01\n\x08\n\x01\x0c\x12\x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\
    \0\x0b\n\n\n\x02\x04\0\x12\x04\x04\0\x0c\x01\n\n\n\x03\x04\0\x01\x12\x03\
    \x04\x08\x0f\n\x0b\n\x04\x04\0\x02\0\x12\x03\x05\x04\x1a\n\x0c\n\x05\x04\
    \0\x02\0\x05\x12\x03\x05\x04\n\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\
    \x0b\x15\n\x0c\n\x05\x04\0\x02\0\x03\x12\x03\x05\x18\x19\n\x0b\n\x04\x04\
    \0\x02\x01\x12\x03\x06\x04\x1a\n\x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\
    \x04\n\n\x0c\n\x05\x04\0\x02\x01\x01\x12\x03\x06\x0b\x15\n\x0c\n\x05\x04\
    \0\x02\x01\x03\x12\x03\x06\x18\x19\n\x0b\n\x04\x04\0\x02\x02\x12\x03\x07\
    \x04\x1a\n\x0c\n\x05\x04\0\x02\x02\x05\x12\x03\x07\x04\n\n\x0c\n\x05\x04\
    \0\x02\x02\x01\x12\x03\x07\x0b\x14\n\x0c\n\x05\x04\0\x02\x02\x03\x12\x03\
    \x07\x18\x19\n\x0b\n\x04\x04\0\x02\x03\x12\x03\x08\x04\x1a\n\x0c\n\x05\
    \x04\0\x02\x03\x05\x12\x03\x08\x04\n\n\x0c\n\x05\x04\0\x02\x03\x01\x12\
    \x03\x08\x0b\x15\n\x0c\n\x05\x04\0\x02\x03\x03\x12\x03\x08\x18\x19\n\x0b\
    \n\x04\x04\0\x02\x04\x12\x03\t\x04\x1a\n\x0c\n\x05\x04\0\x02\x04\x05\x12\
    \x03\t\x04\n\n\x0c\n\x05\x04\0\x02\x04\x01\x12\x03\t\x0b\x10\n\x0c\n\x05\
    \x04\0\x02\x04\x03\x12\x03\t\x18\x19\n\x0b\n\x04\x04\0\x02\x05\x12\x03\n\
    \x04\x1a\n\x0c\n\x05\x04\0\x02\x05\x05\x12\x03\n\x04\n\n\x0c\n\x05\x04\0\
    \x02\x05\x01\x12\x03\n\x0b\x0e\n\x0c\n\x05\x04\0\x02\x05\x03\x12\x03\n\
    \x18\x19\n\x0b\n\x04\x04\0\x02\x06\x12\x03\x0b\x04\x1a\n\x0c\n\x05\x04\0\
    \x02\x06\x05\x12\x03\x0b\x04\t\n\x0c\n\x05\x04\0\x02\x06\x01\x12\x03\x0b\
    \x0b\x0f\n\x0c\n\x05\x04\0\x02\x06\x03\x12\x03\x0b\x18\x19b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(1);
            messages.push(Package::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}


use lazy_static::lazy_static;
lazy_static! {
    static ref PB_POOL: Arc<LinearObjectPool<Package>> = Arc::new(LinearObjectPool::new(||Package::new(), |_v|{}));
}

struct Pack {
    service_id: u16,
    package_id: u16,
    router_id: u32,
    idempotent: u32,
    token: u32,
    len: u32,
    data: Vec<u8>,
}

impl Pack {
    fn new() -> Self {
        Self {
            service_id:0,
            package_id:0,
            router_id: 0,
            idempotent: 0,
            token: 0,
            len: 0,
            data: Vec::new(),
        }
    }

    fn to_bytes(&self) -> Vec<u8> {
        let mut buf = vec![0u8; 20 + self.data.len()];
        unsafe {
            buf[..2].copy_from_slice(core::slice::from_raw_parts(&self.service_id as *const u16 as *const u8, 2));
            buf[2..4].copy_from_slice(core::slice::from_raw_parts(&self.package_id as *const u16 as *const u8, 2));
            buf[4..8].copy_from_slice(core::slice::from_raw_parts(&self.router_id as *const u32 as *const u8, 4));
            buf[8..12].copy_from_slice(core::slice::from_raw_parts(&self.idempotent as *const u32 as *const u8, 4));
            buf[12..16].copy_from_slice(core::slice::from_raw_parts(&self.token as *const u32 as *const u8, 4));
            buf[16..20].copy_from_slice(core::slice::from_raw_parts(&self.len as *const u32 as *const u8, 4));
        }
        let buflen = buf.len();
        buf[20..buflen].copy_from_slice(&self.data);
        
        buf
    }

    fn from_bytes(&mut self, buf: &[u8]) -> Option<()> {
        let ptr = buf.as_ptr();
        unsafe {
            self.service_id = *(ptr as *const u16);
            self.package_id = *(ptr.add(2) as *const u16);
            self.router_id = *(ptr.add(4) as *const u32);
            self.idempotent = *(ptr.add(8) as *const u32);
            self.token = *(ptr.add(12) as *const u32);
            self.len = *(ptr.add(16) as *const u32);
        }

        if self.data.len() < self.len as usize {
            self.data.resize(self.len as usize, 0);
        }

        self.data[..buf.len()-20].copy_from_slice(&buf[20..buf.len()]);
        Some(())
    }
}

fn main() {
    let beg = utils::now_unix_micros();
    let mut rawlen = 0;
    for _ in 0..10000 {
        // let mut p1 = PB_POOL.pull();
        let mut p1 = Package::new();
        p1.service_id = 10000;
        p1.package_id = 20000;
        p1.router_id = 30000;
        p1.idempotent = 40000;
        p1.token = 50000;
        p1.len = 11;
        p1.data = b"Hello world".to_vec();

        let buf = p1.write_to_bytes().unwrap();
        rawlen = buf.len();
        let p2: Package = protobuf::Message::parse_from_bytes(&buf).unwrap();
        assert_eq!(p1.service_id, p2.service_id);
        assert_eq!(p1.package_id, p2.package_id);
        assert_eq!(p1.router_id, p2.router_id);
        assert_eq!(p1.idempotent, p2.idempotent);
        assert_eq!(p1.token, p2.token);
        assert_eq!(p1.len, p2.len);
        assert_eq!(core::str::from_utf8(&p1.data).unwrap(),core::str::from_utf8(&p2.data).unwrap());
    }

    println!("protobuf 总耗时 {} micro seconds, len: {}", utils::now_unix_micros() - beg, rawlen);

    let beg = utils::now_unix_micros();
    for _ in 0..10000 {
        let mut p1 = pack::PACK_POOL.pull();
        p1.set_service_id(10000);
        p1.set_package_id(20000);
        p1.set_router_id(30000);
        p1.set_idempotent(40000);
        p1.set_token(50000);
        p1.set_data(b"Hello world");

        let buf = p1.to_bytes();
        rawlen = buf.len();
        let mut p2 = pack::PACK_POOL.pull();
        assert!(p2.parse(&buf).unwrap());
        assert_eq!(p1.service_id(), p2.service_id());
        assert_eq!(p1.package_id(), p2.package_id());
        assert_eq!(p1.router_id(), p2.router_id());
        assert_eq!(p1.idempotent(), p2.idempotent());
        assert_eq!(p1.token(), p2.token());
        assert_eq!(p1.data().len(), p2.data().len());
        assert_eq!(core::str::from_utf8(p1.data()).unwrap(),core::str::from_utf8(p2.data()).unwrap());
    }

    println!("custom 总耗时 {} micro seconds, len: {}", utils::now_unix_micros() - beg, rawlen);

    let beg = utils::now_unix_micros();
    let mut rawlen = 0;
    for _ in 0..10000 {
        let mut p1 = Pack::new();
        p1.service_id = 10000;
        p1.package_id = 20000;
        p1.router_id = 30000;
        p1.idempotent = 40000;
        p1.token = 50000;
        p1.len = 11;
        p1.data = b"Hello world".to_vec();

        let buf = p1.to_bytes();
        rawlen = buf.len();
        let mut p2 = Pack::new();
        p2.from_bytes(&buf).unwrap();
        assert_eq!(p1.service_id, p2.service_id);
        assert_eq!(p1.package_id, p2.package_id);
        assert_eq!(p1.router_id, p2.router_id);
        assert_eq!(p1.idempotent, p2.idempotent);
        assert_eq!(p1.token, p2.token);
        assert_eq!(p1.len, p2.len);
        assert_eq!(core::str::from_utf8(&p1.data).unwrap(),core::str::from_utf8(&p2.data).unwrap());
    }

    println!("pack 总耗时 {} micro seconds, len: {}", utils::now_unix_micros() - beg, rawlen);
}